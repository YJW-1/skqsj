
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/resources/SDK/scripts/FaceBookManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '20afduwcf1MXbHA1ejJDcxQ', 'FaceBookManager');
// resources/SDK/scripts/FaceBookManager.js

"use strict";

var FaceBookManager = cc.Class({
  "extends": require('BaseManager'),
  properties: {
    videoID: null
  },
  init: function init(obj) {
    this._super();

    this.loadVideo(); // FB.init({
    //     appId            : '216568438988937',
    //     autoLogAppEvents : true,
    //     status           : true,
    //     xfbml            : true,
    //     version          : 'v2.9'
    // });
  },
  getHaveVideo: function getHaveVideo() {
    if (FBVideoId != "") {
      return true;
    }

    return false;
  },
  getSysPlatform_string: function getSysPlatform_string() {
    return 'faceBook';
  },
  getSysPlatform: function getSysPlatform() {
    return 2;
  },
  shareHelp: function shareHelp() {},
  // 分享功能
  share: function share(obj) {
    FBInstant.shareAsync({
      intent: 'SHARE',
      //SHARE   REQUEST  INVITE   CHALLENGE
      image: this.getImgBase64(),
      text: FBInstant.player.getName() + 'is asking for your help!',
      data: {
        myReplayData: '...'
      }
    }).then(function () {
      // continue with the game.
      if (obj && obj.success) {
        obj.success(1);
      }
    });
  },
  // 截屏返回 iamge base6，用于 Share
  getImgBase64: function getImgBase64() {
    var target = cc.find('Canvas');
    var width = 960,
        height = 1280;
    var renderTexture = new cc.RenderTexture(width, height);
    renderTexture.begin();

    target._sgNode.visit();

    renderTexture.end(); //

    var canvas = document.createElement('canvas');
    var ctx = canvas.getContext('2d');
    canvas.width = width;
    canvas.height = height;

    if (cc._renderType === cc.game.RENDER_TYPE_CANVAS) {
      var texture = renderTexture.getSprite().getTexture();
      var image = texture.getHtmlElementObj();
      ctx.drawImage(image, 0, 0);
    } else if (cc._renderType === cc.game.RENDER_TYPE_WEBGL) {
      var buffer = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);

      var _texture = renderTexture.getSprite().getTexture()._glID;

      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, _texture, 0);
      var data = new Uint8Array(width * height * 4);
      gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      var rowBytes = width * 4;

      for (var row = 0; row < height; row++) {
        var srow = height - 1 - row;
        var data2 = new Uint8ClampedArray(data.buffer, srow * width * 4, rowBytes);
        var imageData = new ImageData(data2, width, 1);
        ctx.putImageData(imageData, 0, row);
      }
    }

    return canvas.toDataURL('image/png');
  },

  /**
   * 观看视频 id 没用到 closeCallBack 看完视频回调
   */
  //lieyou_SdkManager.addToast(cc.find("Canvas"),res);
  loadVideo: function loadVideo() {
    var self = this;
    FBInstant.getRewardedVideoAsync(FBVideoId // Your Ad Placement Id
    ).then(function (rewarded) {
      // Load the Ad asynchronously
      self.videoID = rewarded;
      return self.videoID.loadAsync();
    });
  },
  showRewardedVideoAd: function showRewardedVideoAd(id, closeCallBack) {
    var self = this;

    if (this.videoID) {
      var id = this.videoID;
      this.videoID = null;
      id.showAsync().then(function () {
        closeCallBack(true);
        self.loadVideo();
      });
    } else {
      self.loadVideo();
    }
  },
  showSpotByBegin: function showSpotByBegin(isHaveNative, top) {
    this.showMySpot();
  },
  showSpotByPause: function showSpotByPause(isHaveNative, top) {
    // var num = Userdefault.getIntForKey("showBannerByPauseNum");
    // Userdefault.setDataForKey("showBannerByPauseNum",num+1);
    // if((num - 3)%3 == 0) {
    this.showMySpot(); // }
  },
  showSpotByFinish: function showSpotByFinish(isHaveNative, top) {
    // var num = Userdefault.getIntForKey("showBannerByFinishNum");
    // Userdefault.setDataForKey("showBannerByFinishNum",num+1);
    // if((num - 3)%3 == 0) {
    this.showMySpot(); // }
  },
  showMySpot: function showMySpot() {
    var self = this;

    if (this.videoID) {
      var id = this.videoID;
      this.videoID = null;
      id.showAsync().then(function () {
        self.loadVideo();
      });
    } else {
      self.loadVideo();
    }
  }
});
module.exports = FaceBookManager;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xccmVzb3VyY2VzXFxTREtcXHNjcmlwdHNcXEZhY2VCb29rTWFuYWdlci5qcyJdLCJuYW1lcyI6WyJGYWNlQm9va01hbmFnZXIiLCJjYyIsIkNsYXNzIiwicmVxdWlyZSIsInByb3BlcnRpZXMiLCJ2aWRlb0lEIiwiaW5pdCIsIm9iaiIsIl9zdXBlciIsImxvYWRWaWRlbyIsImdldEhhdmVWaWRlbyIsIkZCVmlkZW9JZCIsImdldFN5c1BsYXRmb3JtX3N0cmluZyIsImdldFN5c1BsYXRmb3JtIiwic2hhcmVIZWxwIiwic2hhcmUiLCJGQkluc3RhbnQiLCJzaGFyZUFzeW5jIiwiaW50ZW50IiwiaW1hZ2UiLCJnZXRJbWdCYXNlNjQiLCJ0ZXh0IiwicGxheWVyIiwiZ2V0TmFtZSIsImRhdGEiLCJteVJlcGxheURhdGEiLCJ0aGVuIiwic3VjY2VzcyIsInRhcmdldCIsImZpbmQiLCJ3aWR0aCIsImhlaWdodCIsInJlbmRlclRleHR1cmUiLCJSZW5kZXJUZXh0dXJlIiwiYmVnaW4iLCJfc2dOb2RlIiwidmlzaXQiLCJlbmQiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjdHgiLCJnZXRDb250ZXh0IiwiX3JlbmRlclR5cGUiLCJnYW1lIiwiUkVOREVSX1RZUEVfQ0FOVkFTIiwidGV4dHVyZSIsImdldFNwcml0ZSIsImdldFRleHR1cmUiLCJnZXRIdG1sRWxlbWVudE9iaiIsImRyYXdJbWFnZSIsIlJFTkRFUl9UWVBFX1dFQkdMIiwiYnVmZmVyIiwiZ2wiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiX2dsSUQiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsIkNPTE9SX0FUVEFDSE1FTlQwIiwiVEVYVFVSRV8yRCIsIlVpbnQ4QXJyYXkiLCJyZWFkUGl4ZWxzIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJyb3dCeXRlcyIsInJvdyIsInNyb3ciLCJkYXRhMiIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiaW1hZ2VEYXRhIiwiSW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwidG9EYXRhVVJMIiwic2VsZiIsImdldFJld2FyZGVkVmlkZW9Bc3luYyIsInJld2FyZGVkIiwibG9hZEFzeW5jIiwic2hvd1Jld2FyZGVkVmlkZW9BZCIsImlkIiwiY2xvc2VDYWxsQmFjayIsInNob3dBc3luYyIsInNob3dTcG90QnlCZWdpbiIsImlzSGF2ZU5hdGl2ZSIsInRvcCIsInNob3dNeVNwb3QiLCJzaG93U3BvdEJ5UGF1c2UiLCJzaG93U3BvdEJ5RmluaXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxlQUFlLEdBQUdDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQzlCLGFBQVNDLE9BQU8sQ0FBQyxhQUFELENBRGM7QUFFM0JDLEVBQUFBLFVBQVUsRUFBQztBQUNQQyxJQUFBQSxPQUFPLEVBQUM7QUFERCxHQUZnQjtBQUszQkMsRUFBQUEsSUFBSSxFQUFFLGNBQVNDLEdBQVQsRUFBYTtBQUNmLFNBQUtDLE1BQUw7O0FBQ0EsU0FBS0MsU0FBTCxHQUZlLENBSWY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSCxHQWhCMEI7QUFpQjNCQyxFQUFBQSxZQWpCMkIsMEJBaUJiO0FBQ1YsUUFBR0MsU0FBUyxJQUFJLEVBQWhCLEVBQW1CO0FBQ2YsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsV0FBTyxLQUFQO0FBQ0gsR0F0QjBCO0FBdUIzQkMsRUFBQUEscUJBdkIyQixtQ0F1Qko7QUFDekIsV0FBTyxVQUFQO0FBQ0csR0F6QjBCO0FBMEIzQkMsRUFBQUEsY0ExQjJCLDRCQTBCWDtBQUNsQixXQUFPLENBQVA7QUFDQSxHQTVCNkI7QUE2QjNCQyxFQUFBQSxTQTdCMkIsdUJBNkJoQixDQUFFLENBN0JjO0FBK0IzQjtBQUNBQyxFQUFBQSxLQWhDMkIsaUJBZ0NwQlIsR0FoQ29CLEVBZ0NmO0FBQ1JTLElBQUFBLFNBQVMsQ0FBQ0MsVUFBVixDQUFxQjtBQUNqQkMsTUFBQUEsTUFBTSxFQUFFLE9BRFM7QUFDRDtBQUNoQkMsTUFBQUEsS0FBSyxFQUFFLEtBQUtDLFlBQUwsRUFGVTtBQUdqQkMsTUFBQUEsSUFBSSxFQUFFTCxTQUFTLENBQUNNLE1BQVYsQ0FBaUJDLE9BQWpCLEtBQTZCLDBCQUhsQjtBQUlqQkMsTUFBQUEsSUFBSSxFQUFFO0FBQUNDLFFBQUFBLFlBQVksRUFBRTtBQUFmO0FBSlcsS0FBckIsRUFLR0MsSUFMSCxDQUtRLFlBQVU7QUFDZDtBQUNBLFVBQUduQixHQUFHLElBQUlBLEdBQUcsQ0FBQ29CLE9BQWQsRUFBc0I7QUFDbEJwQixRQUFBQSxHQUFHLENBQUNvQixPQUFKLENBQVksQ0FBWjtBQUNIO0FBQ0osS0FWRDtBQVdILEdBNUMwQjtBQThDM0I7QUFDQVAsRUFBQUEsWUEvQzJCLDBCQStDWDtBQUNaLFFBQUlRLE1BQU0sR0FBRzNCLEVBQUUsQ0FBQzRCLElBQUgsQ0FBUSxRQUFSLENBQWI7QUFDQSxRQUFJQyxLQUFLLEdBQUcsR0FBWjtBQUFBLFFBQWlCQyxNQUFNLEdBQUcsSUFBMUI7QUFDQSxRQUFJQyxhQUFhLEdBQUcsSUFBSS9CLEVBQUUsQ0FBQ2dDLGFBQVAsQ0FBcUJILEtBQXJCLEVBQTRCQyxNQUE1QixDQUFwQjtBQUNBQyxJQUFBQSxhQUFhLENBQUNFLEtBQWQ7O0FBQ0FOLElBQUFBLE1BQU0sQ0FBQ08sT0FBUCxDQUFlQyxLQUFmOztBQUNBSixJQUFBQSxhQUFhLENBQUNLLEdBQWQsR0FOWSxDQU9aOztBQUNBLFFBQUlDLE1BQU0sR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLFFBQXZCLENBQWI7QUFDQSxRQUFJQyxHQUFHLEdBQUdILE1BQU0sQ0FBQ0ksVUFBUCxDQUFrQixJQUFsQixDQUFWO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ1IsS0FBUCxHQUFlQSxLQUFmO0FBQ0FRLElBQUFBLE1BQU0sQ0FBQ1AsTUFBUCxHQUFnQkEsTUFBaEI7O0FBQ0EsUUFBSTlCLEVBQUUsQ0FBQzBDLFdBQUgsS0FBbUIxQyxFQUFFLENBQUMyQyxJQUFILENBQVFDLGtCQUEvQixFQUFtRDtBQUMvQyxVQUFJQyxPQUFPLEdBQUdkLGFBQWEsQ0FBQ2UsU0FBZCxHQUEwQkMsVUFBMUIsRUFBZDtBQUNBLFVBQUk3QixLQUFLLEdBQUcyQixPQUFPLENBQUNHLGlCQUFSLEVBQVo7QUFDQVIsTUFBQUEsR0FBRyxDQUFDUyxTQUFKLENBQWMvQixLQUFkLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCO0FBQ0gsS0FKRCxNQUtLLElBQUlsQixFQUFFLENBQUMwQyxXQUFILEtBQW1CMUMsRUFBRSxDQUFDMkMsSUFBSCxDQUFRTyxpQkFBL0IsRUFBa0Q7QUFDbkQsVUFBSUMsTUFBTSxHQUFHQyxFQUFFLENBQUNDLGlCQUFILEVBQWI7QUFDQUQsTUFBQUEsRUFBRSxDQUFDRSxlQUFILENBQW1CRixFQUFFLENBQUNHLFdBQXRCLEVBQW1DSixNQUFuQzs7QUFDQSxVQUFJTixRQUFPLEdBQUdkLGFBQWEsQ0FBQ2UsU0FBZCxHQUEwQkMsVUFBMUIsR0FBdUNTLEtBQXJEOztBQUNBSixNQUFBQSxFQUFFLENBQUNLLG9CQUFILENBQXdCTCxFQUFFLENBQUNHLFdBQTNCLEVBQXdDSCxFQUFFLENBQUNNLGlCQUEzQyxFQUE4RE4sRUFBRSxDQUFDTyxVQUFqRSxFQUE2RWQsUUFBN0UsRUFBc0YsQ0FBdEY7QUFDQSxVQUFJdEIsSUFBSSxHQUFHLElBQUlxQyxVQUFKLENBQWUvQixLQUFLLEdBQUdDLE1BQVIsR0FBaUIsQ0FBaEMsQ0FBWDtBQUNBc0IsTUFBQUEsRUFBRSxDQUFDUyxVQUFILENBQWMsQ0FBZCxFQUFpQixDQUFqQixFQUFvQmhDLEtBQXBCLEVBQTJCQyxNQUEzQixFQUFtQ3NCLEVBQUUsQ0FBQ1UsSUFBdEMsRUFBNENWLEVBQUUsQ0FBQ1csYUFBL0MsRUFBOER4QyxJQUE5RDtBQUNBNkIsTUFBQUEsRUFBRSxDQUFDRSxlQUFILENBQW1CRixFQUFFLENBQUNHLFdBQXRCLEVBQW1DLElBQW5DO0FBQ0EsVUFBSVMsUUFBUSxHQUFHbkMsS0FBSyxHQUFHLENBQXZCOztBQUNBLFdBQUssSUFBSW9DLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUduQyxNQUF4QixFQUFnQ21DLEdBQUcsRUFBbkMsRUFBdUM7QUFDbkMsWUFBSUMsSUFBSSxHQUFHcEMsTUFBTSxHQUFHLENBQVQsR0FBYW1DLEdBQXhCO0FBQ0EsWUFBSUUsS0FBSyxHQUFHLElBQUlDLGlCQUFKLENBQXNCN0MsSUFBSSxDQUFDNEIsTUFBM0IsRUFBbUNlLElBQUksR0FBR3JDLEtBQVAsR0FBZSxDQUFsRCxFQUFxRG1DLFFBQXJELENBQVo7QUFDQSxZQUFJSyxTQUFTLEdBQUcsSUFBSUMsU0FBSixDQUFjSCxLQUFkLEVBQXFCdEMsS0FBckIsRUFBNEIsQ0FBNUIsQ0FBaEI7QUFDQVcsUUFBQUEsR0FBRyxDQUFDK0IsWUFBSixDQUFpQkYsU0FBakIsRUFBNEIsQ0FBNUIsRUFBK0JKLEdBQS9CO0FBQ0g7QUFDSjs7QUFDRCxXQUFPNUIsTUFBTSxDQUFDbUMsU0FBUCxDQUFpQixXQUFqQixDQUFQO0FBQ0gsR0FqRjBCOztBQWtGM0I7OztBQUdBO0FBQ0FoRSxFQUFBQSxTQXRGMkIsdUJBc0ZoQjtBQUNQLFFBQUlpRSxJQUFJLEdBQUcsSUFBWDtBQUNBMUQsSUFBQUEsU0FBUyxDQUFDMkQscUJBQVYsQ0FDSWhFLFNBREosQ0FDZTtBQURmLE1BRUllLElBRkosQ0FFUyxVQUFTa0QsUUFBVCxFQUFtQjtBQUN4QjtBQUNBRixNQUFBQSxJQUFJLENBQUNyRSxPQUFMLEdBQWV1RSxRQUFmO0FBQ0EsYUFBT0YsSUFBSSxDQUFDckUsT0FBTCxDQUFhd0UsU0FBYixFQUFQO0FBQ0QsS0FOSDtBQU9ILEdBL0YwQjtBQWdHM0JDLEVBQUFBLG1CQWhHMkIsK0JBZ0dQQyxFQWhHTyxFQWdHSkMsYUFoR0ksRUFnR1U7QUFFakMsUUFBSU4sSUFBSSxHQUFHLElBQVg7O0FBQ0EsUUFBRyxLQUFLckUsT0FBUixFQUFpQjtBQUNiLFVBQUkwRSxFQUFFLEdBQUcsS0FBSzFFLE9BQWQ7QUFDQSxXQUFLQSxPQUFMLEdBQWUsSUFBZjtBQUNBMEUsTUFBQUEsRUFBRSxDQUFDRSxTQUFILEdBQWV2RCxJQUFmLENBQW9CLFlBQVc7QUFDM0JzRCxRQUFBQSxhQUFhLENBQUMsSUFBRCxDQUFiO0FBQ0FOLFFBQUFBLElBQUksQ0FBQ2pFLFNBQUw7QUFDSCxPQUhEO0FBSUgsS0FQRCxNQU9LO0FBQ0RpRSxNQUFBQSxJQUFJLENBQUNqRSxTQUFMO0FBQ0g7QUFDSixHQTdHMEI7QUE4RzNCeUUsRUFBQUEsZUFBZSxFQUFFLHlCQUFTQyxZQUFULEVBQXNCQyxHQUF0QixFQUEwQjtBQUM3QyxTQUFLQyxVQUFMO0FBQ0EsR0FoSDZCO0FBaUg5QkMsRUFBQUEsZUFBZSxFQUFFLHlCQUFTSCxZQUFULEVBQXNCQyxHQUF0QixFQUEwQjtBQUUxQztBQUNBO0FBRUE7QUFDQyxTQUFLQyxVQUFMLEdBTnlDLENBTzFDO0FBRUEsR0ExSDZCO0FBMkgzQkUsRUFBQUEsZ0JBQWdCLEVBQUUsMEJBQVNKLFlBQVQsRUFBc0JDLEdBQXRCLEVBQTBCO0FBQzlDO0FBQ0E7QUFFQTtBQUNDLFNBQUtDLFVBQUwsR0FMNkMsQ0FNOUM7QUFFRyxHQW5JMEI7QUFvSTNCQSxFQUFBQSxVQXBJMkIsd0JBb0lmO0FBQ1IsUUFBSVgsSUFBSSxHQUFHLElBQVg7O0FBQ0EsUUFBRyxLQUFLckUsT0FBUixFQUFpQjtBQUNiLFVBQUkwRSxFQUFFLEdBQUcsS0FBSzFFLE9BQWQ7QUFDQSxXQUFLQSxPQUFMLEdBQWUsSUFBZjtBQUNBMEUsTUFBQUEsRUFBRSxDQUFDRSxTQUFILEdBQWV2RCxJQUFmLENBQW9CLFlBQVc7QUFDM0JnRCxRQUFBQSxJQUFJLENBQUNqRSxTQUFMO0FBQ0gsT0FGRDtBQUdILEtBTkQsTUFNSztBQUNEaUUsTUFBQUEsSUFBSSxDQUFDakUsU0FBTDtBQUNIO0FBQ1A7QUEvSTZCLENBQVQsQ0FBdEI7QUFrSkErRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJ6RixlQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibGV0IEZhY2VCb29rTWFuYWdlciA9IGNjLkNsYXNzKHtcclxuXHRleHRlbmRzOiByZXF1aXJlKCdCYXNlTWFuYWdlcicpLFxyXG4gICAgcHJvcGVydGllczp7XHJcbiAgICAgICAgdmlkZW9JRDpudWxsLFxyXG4gICAgfSxcclxuICAgIGluaXQ6IGZ1bmN0aW9uKG9iail7XHJcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmxvYWRWaWRlbygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEZCLmluaXQoe1xyXG4gICAgICAgIC8vICAgICBhcHBJZCAgICAgICAgICAgIDogJzIxNjU2ODQzODk4ODkzNycsXHJcbiAgICAgICAgLy8gICAgIGF1dG9Mb2dBcHBFdmVudHMgOiB0cnVlLFxyXG4gICAgICAgIC8vICAgICBzdGF0dXMgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAvLyAgICAgeGZibWwgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgLy8gICAgIHZlcnNpb24gICAgICAgICAgOiAndjIuOSdcclxuICAgICAgICAvLyB9KTtcclxuICAgIH0sXHJcbiAgICBnZXRIYXZlVmlkZW8oKXtcclxuICAgICAgICBpZihGQlZpZGVvSWQgIT0gXCJcIil7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgZ2V0U3lzUGxhdGZvcm1fc3RyaW5nKCl7XHJcblx0XHRyZXR1cm4gJ2ZhY2VCb29rJztcclxuICAgIH0sXHJcbiAgICBnZXRTeXNQbGF0Zm9ybSgpe1xyXG5cdFx0cmV0dXJuIDI7XHJcblx0fSxcclxuICAgIHNoYXJlSGVscCgpe30sXHJcblxyXG4gICAgLy8g5YiG5Lqr5Yqf6IO9XHJcbiAgICBzaGFyZSAob2JqKSB7XHJcbiAgICAgICAgRkJJbnN0YW50LnNoYXJlQXN5bmMoe1xyXG4gICAgICAgICAgICBpbnRlbnQ6ICdTSEFSRScsLy9TSEFSRSAgIFJFUVVFU1QgIElOVklURSAgIENIQUxMRU5HRVxyXG4gICAgICAgICAgICBpbWFnZTogdGhpcy5nZXRJbWdCYXNlNjQoKSxcclxuICAgICAgICAgICAgdGV4dDogRkJJbnN0YW50LnBsYXllci5nZXROYW1lKCkgKyAnaXMgYXNraW5nIGZvciB5b3VyIGhlbHAhJyxcclxuICAgICAgICAgICAgZGF0YToge215UmVwbGF5RGF0YTogJy4uLid9LFxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgLy8gY29udGludWUgd2l0aCB0aGUgZ2FtZS5cclxuICAgICAgICAgICAgaWYob2JqICYmIG9iai5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgIG9iai5zdWNjZXNzKDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOaIquWxj+i/lOWbniBpYW1nZSBiYXNlNu+8jOeUqOS6jiBTaGFyZVxyXG4gICAgZ2V0SW1nQmFzZTY0ICgpIHtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0gY2MuZmluZCgnQ2FudmFzJyk7XHJcbiAgICAgICAgbGV0IHdpZHRoID0gOTYwLCBoZWlnaHQgPSAxMjgwO1xyXG4gICAgICAgIGxldCByZW5kZXJUZXh0dXJlID0gbmV3IGNjLlJlbmRlclRleHR1cmUod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgcmVuZGVyVGV4dHVyZS5iZWdpbigpO1xyXG4gICAgICAgIHRhcmdldC5fc2dOb2RlLnZpc2l0KCk7XHJcbiAgICAgICAgcmVuZGVyVGV4dHVyZS5lbmQoKTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICBpZiAoY2MuX3JlbmRlclR5cGUgPT09IGNjLmdhbWUuUkVOREVSX1RZUEVfQ0FOVkFTKSB7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlID0gcmVuZGVyVGV4dHVyZS5nZXRTcHJpdGUoKS5nZXRUZXh0dXJlKCk7XHJcbiAgICAgICAgICAgIGxldCBpbWFnZSA9IHRleHR1cmUuZ2V0SHRtbEVsZW1lbnRPYmooKTtcclxuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNjLl9yZW5kZXJUeXBlID09PSBjYy5nYW1lLlJFTkRFUl9UWVBFX1dFQkdMKSB7XHJcbiAgICAgICAgICAgIGxldCBidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xyXG4gICAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGJ1ZmZlcik7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlID0gcmVuZGVyVGV4dHVyZS5nZXRTcHJpdGUoKS5nZXRUZXh0dXJlKCkuX2dsSUQ7XHJcbiAgICAgICAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSwgMCk7XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkod2lkdGggKiBoZWlnaHQgKiA0KTtcclxuICAgICAgICAgICAgZ2wucmVhZFBpeGVscygwLCAwLCB3aWR0aCwgaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBkYXRhKTtcclxuICAgICAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IHJvd0J5dGVzID0gd2lkdGggKiA0O1xyXG4gICAgICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBoZWlnaHQ7IHJvdysrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3JvdyA9IGhlaWdodCAtIDEgLSByb3c7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YTIgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoZGF0YS5idWZmZXIsIHNyb3cgKiB3aWR0aCAqIDQsIHJvd0J5dGVzKTtcclxuICAgICAgICAgICAgICAgIGxldCBpbWFnZURhdGEgPSBuZXcgSW1hZ2VEYXRhKGRhdGEyLCB3aWR0aCwgMSk7XHJcbiAgICAgICAgICAgICAgICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgcm93KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvcG5nJyk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiDop4LnnIvop4bpopEgaWQg5rKh55So5YiwIGNsb3NlQ2FsbEJhY2sg55yL5a6M6KeG6aKR5Zue6LCDXHJcbiAgICAgKi9cclxuICAgIC8vbGlleW91X1Nka01hbmFnZXIuYWRkVG9hc3QoY2MuZmluZChcIkNhbnZhc1wiKSxyZXMpO1xyXG4gICAgbG9hZFZpZGVvKCl7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIEZCSW5zdGFudC5nZXRSZXdhcmRlZFZpZGVvQXN5bmMoXHJcbiAgICAgICAgICAgIEZCVmlkZW9JZCwgLy8gWW91ciBBZCBQbGFjZW1lbnQgSWRcclxuICAgICAgICAgICkudGhlbihmdW5jdGlvbihyZXdhcmRlZCkge1xyXG4gICAgICAgICAgICAvLyBMb2FkIHRoZSBBZCBhc3luY2hyb25vdXNseVxyXG4gICAgICAgICAgICBzZWxmLnZpZGVvSUQgPSByZXdhcmRlZDtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYudmlkZW9JRC5sb2FkQXN5bmMoKTtcclxuICAgICAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgc2hvd1Jld2FyZGVkVmlkZW9BZChpZCxjbG9zZUNhbGxCYWNrKXtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgaWYodGhpcy52aWRlb0lEKSB7XHJcbiAgICAgICAgICAgIHZhciBpZCA9IHRoaXMudmlkZW9JRDtcclxuICAgICAgICAgICAgdGhpcy52aWRlb0lEID0gbnVsbDtcclxuICAgICAgICAgICAgaWQuc2hvd0FzeW5jKCkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNsb3NlQ2FsbEJhY2sodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRWaWRlbygpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBzZWxmLmxvYWRWaWRlbygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzaG93U3BvdEJ5QmVnaW46IGZ1bmN0aW9uKGlzSGF2ZU5hdGl2ZSx0b3Ape1xyXG5cdFx0dGhpcy5zaG93TXlTcG90KCk7XHJcblx0fSxcclxuXHRzaG93U3BvdEJ5UGF1c2U6IGZ1bmN0aW9uKGlzSGF2ZU5hdGl2ZSx0b3Ape1xyXG5cclxuXHRcdC8vIHZhciBudW0gPSBVc2VyZGVmYXVsdC5nZXRJbnRGb3JLZXkoXCJzaG93QmFubmVyQnlQYXVzZU51bVwiKTtcclxuXHRcdC8vIFVzZXJkZWZhdWx0LnNldERhdGFGb3JLZXkoXCJzaG93QmFubmVyQnlQYXVzZU51bVwiLG51bSsxKTtcclxuXHJcblx0XHQvLyBpZigobnVtIC0gMyklMyA9PSAwKSB7XHJcblx0XHRcdHRoaXMuc2hvd015U3BvdCgpO1xyXG5cdFx0Ly8gfVxyXG5cdFx0XHJcblx0fSxcclxuICAgIHNob3dTcG90QnlGaW5pc2g6IGZ1bmN0aW9uKGlzSGF2ZU5hdGl2ZSx0b3Ape1xyXG5cdFx0Ly8gdmFyIG51bSA9IFVzZXJkZWZhdWx0LmdldEludEZvcktleShcInNob3dCYW5uZXJCeUZpbmlzaE51bVwiKTtcclxuXHRcdC8vIFVzZXJkZWZhdWx0LnNldERhdGFGb3JLZXkoXCJzaG93QmFubmVyQnlGaW5pc2hOdW1cIixudW0rMSk7XHJcblx0XHRcclxuXHRcdC8vIGlmKChudW0gLSAzKSUzID09IDApIHtcclxuXHRcdFx0dGhpcy5zaG93TXlTcG90KCk7XHJcblx0XHQvLyB9XHJcblx0XHRcclxuICAgIH0sXHJcbiAgICBzaG93TXlTcG90KCl7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGlmKHRoaXMudmlkZW9JRCkge1xyXG4gICAgICAgICAgICB2YXIgaWQgPSB0aGlzLnZpZGVvSUQ7XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9JRCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlkLnNob3dBc3luYygpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRWaWRlbygpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBzZWxmLmxvYWRWaWRlbygpO1xyXG4gICAgICAgIH1cclxuXHR9LFxyXG59KVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGYWNlQm9va01hbmFnZXI7XHJcblxyXG5cclxuIl19