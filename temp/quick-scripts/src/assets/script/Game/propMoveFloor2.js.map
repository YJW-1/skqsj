{"version":3,"sources":["assets\\script\\Game\\propMoveFloor2.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { cocosz } from \"../Framework/CocosZ\";\r\nimport Constant, { tag } from \"../Framework/Constant\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class propMoveFloor2 extends cc.Component {\r\n\r\n    minDistance: number = 0;\r\n    maxDistance: number = 0;\r\n    pos: any = 0;\r\n    floor: cc.Node = null;\r\n    role: cc.Node = null;\r\n    btn: cc.Node = null;\r\n    btnSelect: cc.Node = null;\r\n    isStop: boolean = false;\r\n    isFirstMove = false;\r\n    onInitDistance() {\r\n        // let d1 = this.node.parent.getChildByName(\"limit1\").x\r\n        // let d2 = this.node.parent.getChildByName(\"limit2\").x\r\n        // if (this.node.angle == 90) {\r\n        //     d1 = this.node.parent.getChildByName(\"limit1\").y\r\n        //     d2 = this.node.parent.getChildByName(\"limit2\").y\r\n        // }\r\n        // let rope = this.node.parent.getChildByName(\"rope\");\r\n        // if (d1 > d2) {\r\n        //     this.minDistance = d2 + 115;\r\n        //     this.maxDistance = d1 - 115;\r\n        // }\r\n        // else {\r\n        //     this.minDistance = d1 + 115;\r\n        //     this.maxDistance = d2 - 115;\r\n        // }\r\n        if (this.node.angle == 0 || this.node.angle == 180) {\r\n            this.minDistance = this.floor.x;\r\n            this.maxDistance = -this.floor.x;\r\n        }\r\n    }\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        this.btn = this.node.getChildByName(\"btn\");\r\n        this.floor = this.node.getChildByName(\"floor\");\r\n        this.btnSelect = this.btn.getChildByName(\"btnSelect\");\r\n    }\r\n\r\n\r\n    onCollisionEnter(other, self) {\r\n    }\r\n    onCollisionExit(other, self) {\r\n    }\r\n    start() {\r\n        this.onInitDistance()\r\n        this.node.on(cc.Node.EventType.TOUCH_START, (event) => {\r\n            let pp = event.getLocation();\r\n\r\n            pp.y += 1600 * cocosz.gameMgr.touchNum;\r\n            let pos2 = this.node.parent.convertToNodeSpaceAR(pp);\r\n            let pos = cc.v2((Math.ceil(this.node.x - pos2.x)), Math.ceil(this.node.y - pos2.y));\r\n            this.pos = pos;\r\n            this.btnSelect.active = true;\r\n        })\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, (event) => {\r\n            let pp = event.getLocation();\r\n\r\n            pp.y += 1600 * cocosz.gameMgr.touchNum;\r\n            let pos2 = this.node.parent.convertToNodeSpaceAR(pp);\r\n            let pos = cc.v2(this.node.x - pos2.x, this.node.y - pos2.y);\r\n            let hd = pos.signAngle(this.pos);\r\n            let angle = Math.ceil(hd / Math.PI * 180);\r\n            this.pos = pos;\r\n\r\n            this.btn.angle -= angle;\r\n            let dis = this.floor.x + angle * 0.1;\r\n\r\n            // cc.log(angle, dis, \"-------------angle\");\r\n            if (angle == 0 || angle == -0) return\r\n            if (dis >= this.minDistance && dis <= this.maxDistance) {\r\n                this.floor.x = dis;\r\n            }\r\n            return;\r\n            if (this.node.angle == 0) {\r\n\r\n                let dis = this.pos.x - pos.x;\r\n                this.pos = pos;\r\n                let x = 0 + this.node.x;\r\n                if (this.role) {\r\n                    let pos2 = this.node.convertToWorldSpaceAR(this.role.getPosition())\r\n                    let pos = this.node.parent.convertToNodeSpaceAR(pos2);\r\n                    // cc.log(this.node.x, pos.x, dis,this.node.y - pos.y);\r\n                    if (this.isStop && this.node.y - pos.y <= 50) {\r\n                        if (this.node.x >= pos.x && dis > 0) {\r\n                            return;\r\n                        }\r\n                        if (this.node.x <= pos.x && dis < 0) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                if (x - dis <= this.maxDistance && x - dis >= this.minDistance) {\r\n                    this.node.x = x - dis;\r\n                }\r\n            }\r\n            else {\r\n\r\n                let dis = this.pos.y - pos.y;\r\n                this.pos = pos;\r\n                let y = 0 + this.node.y;\r\n                if (this.role) {\r\n                    let pos2 = this.node.convertToWorldSpaceAR(this.role.getPosition())\r\n                    let pos = this.node.parent.convertToNodeSpaceAR(pos2);\r\n                    // cc.log(this.node.x, pos.x, dis,this.node.y - pos.y);\r\n                    // if (this.isStop && this.node.y - pos.y <= 50) {\r\n                    //     if (this.node.x >= pos.x && dis > 0) {\r\n                    //         return;\r\n                    //     }\r\n                    //     if (this.node.x <= pos.x && dis < 0) {\r\n                    //         return;\r\n                    //     }\r\n                    // }\r\n                }\r\n                if (y - dis <= this.maxDistance && y - dis >= this.minDistance) {\r\n                    this.node.y = y - dis;\r\n                }\r\n            }\r\n        })\r\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, (event) => {\r\n            this.btnSelect.active = false;\r\n            // this.isFirstMove = false;\r\n        })\r\n        this.node.on(cc.Node.EventType.TOUCH_END, (event) => {\r\n            this.btnSelect.active = false;\r\n            // this.isFirstMove = false;\r\n        })\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n"]}