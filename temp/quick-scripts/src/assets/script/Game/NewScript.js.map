{"version":3,"sources":["assets\\script\\Game\\NewScript.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    label: cc.Label = null;\r\n\r\n    initPhysics() {\r\n        let count = Math.ceil(this.colliderNode.width / GameData.COLLIDER_SPACE);\r\n        for (let i = 0; i < count; i++) {\r\n            let cld = this.colliderNode.addComponent(cc.PhysicsChainCollider);\r\n            cld.points = [\r\n                cc.v2(-360 + i * GameData.COLLIDER_SPACE, 0),\r\n                cc.v2(-360 + i * GameData.COLLIDER_SPACE, -this.colliderNode.height)\r\n            ];\r\n            cld['apply']();\r\n        }\r\n\r\n        // let leftX = this.leftSide.points[0].x;\r\n        // this.leftSide.points = [cc.v2(leftX, this.mapNode.height * (1 - this.mapNode.anchorY)), cc.v2(leftX, this.mapNode.height * (-this.mapNode.anchorY))];\r\n        // this.leftSide['apply']();\r\n        // let rightX = this.rightSide.points[0].x;\r\n        // this.rightSide.points = [cc.v2(rightX, this.mapNode.height * (1 - this.mapNode.anchorY)), cc.v2(rightX, this.mapNode.height * (-this.mapNode.anchorY))];\r\n        // this.rightSide['apply']();\r\n    }\r\n\r\n    onTouchStart(event: cc.Event.EventTouch) {\r\n\r\n        if (event.getTouches().length > 1) return;\r\n        // if (this.guideFinger.active) {\r\n        //     this.guideFinger.active = false;\r\n        // }\r\n        this.brush.apply();\r\n        let location = event.getLocation();\r\n        let pos = this.mapNode.convertToNodeSpaceAR(location);\r\n        pos.y += this.gameCamera.node.y;\r\n        this.makeEraser(pos);\r\n\r\n    }\r\n    onTouchMove(event: cc.Event.EventTouch) {\r\n        if (event.getTouches().length > 1) return;\r\n        let location = event.getLocation();\r\n        let pos = this.mapNode.convertToNodeSpaceAR(location);\r\n        pos.y += this.gameCamera.node.y;\r\n        this.makeEraser(pos);\r\n    }\r\n    onTouchEnd(event: cc.Event.EventTouch) {\r\n        if (event.getTouches().length > 1) return;\r\n        this.brush.apply();\r\n    }\r\n\r\n    checkInMaskView(pos: cc.Vec2) {\r\n        if (pos.x < (this.maskNode.width * -this.maskNode.anchorX) ||\r\n            pos.x > (this.maskNode.width * (1 - this.maskNode.anchorX)) ||\r\n            pos.y < (this.maskNode.height * (-this.maskNode.anchorY)) ||\r\n            pos.y > (this.maskNode.height * (1 - this.maskNode.anchorY))\r\n        ) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    makeEraser(pos: cc.Vec2, radius = 45, isLine = false) {\r\n        if (!isLine && !this.checkInMaskView(pos)) {\r\n            return;\r\n        }\r\n        let ep = pos\r\n        let pointList = this.brush.draw({\r\n            graphics: this.maskEraser.getGraphics(),\r\n            x: pos.x,\r\n            y: pos.y,\r\n            radius: radius,\r\n        });\r\n        for (let i = 0; i < pointList.length; i++) {\r\n            this.eraserLine(pointList[i], radius);\r\n            // this.drawMaskCircle(pointList[i], radius);\r\n        }\r\n    }\r\n    eraserLine(pos: cc.Vec2, radius: number) {\r\n        let clds = this.colliderNode.getComponents(cc.PhysicsChainCollider);\r\n        let colliderNode = this.colliderNode;\r\n        if (clds && clds.length > 0) {\r\n            for (let i = 0; i < clds.length; i++) {\r\n                let cld: cc.PhysicsChainCollider = clds[i];\r\n                if (cld.points.length > 0) {\r\n                    let p0 = cld.points[0], p1 = cld.points[1];\r\n                    if (cc.Intersection.pointLineDistance(pos, p0, p1, true) <= radius) {\r\n                        if (p0.x > colliderNode.width * (1 - colliderNode.anchorX) ||\r\n                            p0.x < colliderNode.width * -colliderNode.anchorX) {\r\n                            return;\r\n                        }\r\n                        if (this.lineCircle(p0, p1, pos, radius) == 1) {\r\n                            cld.points = [];\r\n                            cld['apply']();\r\n                        } else if (this.lineCircle(p0, p1, pos, radius) == 2) {\r\n                            let height = Math.sqrt(radius * radius - (p0.x - pos.x) * (p0.x - pos.x));\r\n                            let in1 = this.pointInLine(cc.v2(p0.x, height + pos.y), p0, p1);\r\n                            let in2 = this.pointInLine(cc.v2(p0.x, -height + pos.y), p0, p1);\r\n                            if (in1 && in2) {\r\n                                let newCld = colliderNode.addComponent(cc.PhysicsChainCollider);\r\n                                newCld.points = [p0, cc.v2(p0.x, height + pos.y)];\r\n                                newCld['apply']();\r\n                                cld.points = [cc.v2(p1.x, -height + pos.y), p1];\r\n                                cld['apply']();\r\n                            } else if (!in1 && in2) {\r\n                                cld.points = [cc.v2(p1.x, -height + pos.y), p1];\r\n                                cld['apply']();\r\n                            } else if (in1 && !in2) {\r\n                                cld.points = [cc.v2(p0), cc.v2(p0.x, height + pos.y)];\r\n                                cld['apply']();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    pointInCircle(point, center, radius) {\r\n        return point.sub(center).magSqr() < (radius * radius);\r\n    }\r\n\r\n    lineCircle(pos1, pos2, center, radius) {\r\n        //在里面\r\n        let in1 = this.pointInCircle(pos1, center, radius);\r\n        let in2 = this.pointInCircle(pos2, center, radius)\r\n        if (in1 && in2) {\r\n            return 1;\r\n        }\r\n        if (!in1 && in2) {\r\n            return 2;\r\n        }\r\n        if (in1 && !in2) {\r\n            return 2;\r\n        }\r\n\r\n        if (cc.Intersection.pointLineDistance(center, pos1, pos2, true) <= radius) {\r\n            return 2;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    pointInLine(point, pos1, pos2) {\r\n        return pos1.sub(point).mag() + pos2.sub(point).mag() <= pos1.sub(pos2).mag() + 1;\r\n    }\r\n\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n"]}