{"version":3,"sources":["assets\\script\\Game\\propMoveFloor15.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { cocosz } from \"../Framework/CocosZ\";\r\nimport Constant, { tag } from \"../Framework/Constant\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class propMoveFloor extends cc.Component {\r\n    minDistance: number = 0;\r\n    maxDistance: number = 0;\r\n    pos: any = 0;\r\n    floor: cc.Node = null;\r\n    role: cc.Node = null;\r\n    isStop: boolean = false;\r\n\r\n    isTouch: boolean = false;\r\n\r\n\r\n    endPos: number = 0;\r\n\r\n    x: number = -9999;\r\n\r\n    y: number = -9999;\r\n\r\n    rb: cc.RigidBody = null\r\n\r\n    isFirstMove = false;\r\n\r\n    moveDis: number = 0;\r\n\r\n    rocket: cc.Node = null\r\n\r\n\r\n    isLaunch: boolean = false;\r\n\r\n    onRayCast(num1, num2) {\r\n        let startPos = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\r\n        let endPos = cc.v2(startPos.x + 1000 * num1, startPos.y + 1000 * num2);\r\n        let result = cocosz.gameMgr.onRayCast(startPos, endPos);\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n    onInitDistance() {\r\n        // let d1 = this.node.parent.getChildByName(\"limit1\").y\r\n        // let d2 = this.node.parent.getChildByName(\"limit2\").y\r\n        // let limit = this.node.parent.getChildByName(\"limit2\")\r\n        // let scaleX = this.node.parent.getChildByName(\"limit2\").scaleX\r\n        // if (this.node.angle == 90) {\r\n\r\n        //     d1 = this.node.parent.getChildByName(\"limit1\").x\r\n        //     d2 = this.node.parent.getChildByName(\"limit2\").x\r\n        // }\r\n        // let rope = this.node.parent.getChildByName(\"rope\");\r\n        // if (d1 > d2) {\r\n        //     this.minDistance = d2 + (this.node.width * this.node.scaleX + 30);\r\n        //     this.maxDistance = d1 - (this.node.width * this.node.scaleX + 30);\r\n        // }\r\n        // else {\r\n        //     this.minDistance = d1 + (this.node.width * this.node.scaleX + 30);\r\n        //     this.maxDistance = d2 - (this.node.width * this.node.scaleX + 30);\r\n        // }\r\n        if (cocosz.dataMgr.CurLevelId == 31) {\r\n\r\n            this.minDistance = -159\r\n            this.maxDistance = 136\r\n        }\r\n        else if (cocosz.dataMgr.CurLevelId == 45) {\r\n\r\n            this.minDistance = -120\r\n            this.maxDistance = 218\r\n        }\r\n        else if (cocosz.dataMgr.CurLevelId == 130) {\r\n\r\n            this.minDistance = -407\r\n            this.maxDistance = -130\r\n        }\r\n        \r\n    }\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        this.floor = this.node.getChildByName(\"floor\");\r\n        this.rocket = this.node.getChildByName(\"rocket\");\r\n        this.rb = this.node.getComponent(cc.RigidBody);\r\n    }\r\n\r\n\r\n\r\n    start() {\r\n        this.onInitDistance();\r\n        this.node.on(cc.Node.EventType.TOUCH_START, (event) => {\r\n            let pos = this.node.parent.convertToNodeSpaceAR(event.getLocation());\r\n            this.pos = pos;\r\n            this.node.getChildByName(\"floor\").active = true;\r\n            this.isTouch = true;\r\n        })\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, (event) => {\r\n            // cc.game.emit(Constant.E_TIPS_NEXT)\r\n            let pos = this.node.parent.convertToNodeSpaceAR(event.getLocation());\r\n            if (this.node.angle == 90) {\r\n\r\n                let dis = this.pos.x - pos.x;\r\n                this.pos = pos;\r\n                let x = 0 + this.node.x;\r\n\r\n                if (x - dis <= this.maxDistance && x - dis >= this.minDistance) {\r\n                    if (!this.isFirstMove) {\r\n                        this.isFirstMove = true;\r\n                        cocosz.audioMgr.playMoveFloorEffect();\r\n                    }\r\n                    this.node.x = x - dis;\r\n                    this.moveDis++;\r\n                }\r\n            }\r\n            else {\r\n                let dis = this.pos.y - pos.y;\r\n                this.pos = pos;\r\n                let y = 0 + this.node.y;\r\n                // cc.log(y - dis, this.maxDistance, this.minDistance)\r\n                if (y - dis <= this.maxDistance && y - dis >= this.minDistance) {\r\n                    this.node.y = y - dis;\r\n                    this.moveDis++;\r\n                    // let pp = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\r\n                    // let pp2 = this.node.convertToNodeSpaceAR(pp);\r\n                    // this.rocket.setPosition(pp2);\r\n                    // this.rocket.y = this.node.y * this.node.scaleY\r\n                    if (!this.isFirstMove) {\r\n                        this.isFirstMove = true;\r\n                        cocosz.audioMgr.playMoveFloorEffect();\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, (event) => {\r\n            if (this.floor) {\r\n                this.floor.active = false;\r\n            }\r\n\r\n            this.isTouch = false;\r\n            this.isFirstMove = false;\r\n            this.moveDis = 0;\r\n        })\r\n        this.node.on(cc.Node.EventType.TOUCH_END, (event) => {\r\n            if (this.floor) {\r\n                this.floor.active = false;\r\n            }\r\n\r\n            this.isTouch = false;\r\n            this.isFirstMove = false;\r\n            // if (this.moveDis <= 0 && !this.isLaunch) {\r\n\r\n            //     this.isLaunch = true;\r\n            //     // let r = Math.PI * 180 / this.rocket.angle;\r\n            //     // let x = Math.cos(r);\r\n            //     // let y = Math.sin(r);\r\n            //     let rb = this.rocket.addComponent(cc.RigidBody);\r\n            //     rb.enabledContactListener = true\r\n            //     rb.type = cc.RigidBodyType.Kinematic;\r\n\r\n            //     let boxPhy = this.rocket.addComponent(cc.PhysicsBoxCollider);\r\n            //     boxPhy.tag = 31;\r\n            //     boxPhy.size.width=60;\r\n            //     boxPhy.size.height=30;\r\n            //     boxPhy.apply();\r\n\r\n\r\n            //     let v = rb.linearVelocity;\r\n            //     v.x = 1000 * this.rocket.scaleX/3;\r\n            //     rb.linearVelocity = v;\r\n            // }\r\n            this.moveDis = 0;\r\n        })\r\n    }\r\n\r\n    update(dt) {\r\n        // if (this.isTouch) return;\r\n        // if (this.x > -999) {\r\n        //     if (this.x > this.node.x) {\r\n        //         let v = this.rb.linearVelocity;\r\n        //         v.x = 100;\r\n        //     }\r\n        // }\r\n    }\r\n}\r\n"]}