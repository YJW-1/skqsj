{"version":3,"sources":["assets\\script\\Game\\test.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { cocosz } from \"../Framework/CocosZ\";\r\nimport Constant from \"../Framework/Constant\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nconst DIG_RADIUS = 40;\r\nconst DIG_FRAGMENT = 8;\r\nconst DIG_OPTIMIZE_SIZE = 1;\r\n\r\nvar earthRadiusMeters = 1;\r\nvar metersPerDegree = 2.0 * Math.PI * earthRadiusMeters / 360.0;\r\nvar radiansPerDegree = Math.PI / 180.0;\r\nvar degreesPerRadian = 180.0 / Math.PI;\r\nvar pointArr;\r\n@ccclass\r\nexport default class sand extends cc.Component {\r\n    @property(cc.Node)\r\n    node_dirty: cc.Node = null;\r\n\r\n    // graphics: cc.Graphics = null;\r\n\r\n    edge: cc.Graphics = null;\r\n    graphics: cc.Graphics = null;\r\n    Tgraphics: cc.Graphics = null;\r\n\r\n    lineWidth: 60;\r\n\r\n    @property(cc.Mask)\r\n    mask: cc.Mask = null;\r\n\r\n    @property(cc.Graphics)\r\n    line1: cc.Graphics = null;\r\n    @property(cc.Graphics)\r\n    line2: cc.Graphics = null;\r\n\r\n\r\n    @property(cc.Mask)\r\n    Tmask: cc.Mask = null;\r\n\r\n\r\n    @property(cc.Node)\r\n    listen: cc.Node = null;\r\n\r\n    point: any = null;\r\n    point2: any = null;\r\n\r\n\r\n    event: any = null\r\n    private _regions: number[][][] = [];\r\n    private _regions2: any = [];\r\n\r\n    private _regionsTemp: any = [];\r\n    isFrist: boolean = true;\r\n    id: any = -1;\r\n\r\n    isDraw: boolean = false;\r\n\r\n    time: number = 0;\r\n\r\n\r\n    isEnbaled: boolean = false;\r\n\r\n    list: any = null;\r\n\r\n    frequency: number = 0;\r\n\r\n\r\n\r\n\r\n\r\n    /*平面多边形面积*/\r\n    PlanarPolygonAreaMeters2(points) {\r\n        var a = 0;\r\n        for (var i = 0; i < points.length; ++i) {\r\n            var j = (i + 1) % points.length;\r\n            var xi = points[i][0] * metersPerDegree * Math.cos(points[i][1] * radiansPerDegree);\r\n            var yi = points[i][1] * metersPerDegree;\r\n            var xj = points[j][0] * metersPerDegree * Math.cos(points[j][1] * radiansPerDegree);\r\n            var yj = points[j][1] * metersPerDegree;\r\n            a += xi * yj - xj * yi;\r\n        }\r\n        return Math.abs(a / 2);\r\n    }\r\n\r\n\r\n\r\n    init(list) {\r\n        this.Tgraphics.moveTo(list[0][0], list[0][1]);\r\n        for (let idx of list) {\r\n            this.Tgraphics.lineTo(idx[0], idx[1]);\r\n        }\r\n        this.Tgraphics.lineTo(list[0][0], list[0][1]);\r\n        this.Tgraphics.fill();\r\n        // this.Tgraphics.stroke();\r\n\r\n\r\n        this.line1.moveTo(list[0][0], list[0][1]);\r\n        for (let idx = 0; idx < list.length; idx++) {\r\n            if (idx == 0) continue;\r\n            this.line1.lineTo(list[idx][0], list[idx][1]);\r\n        }\r\n        this.line1.lineTo(list[0][0], list[0][1]);\r\n        this.line1.stroke();\r\n\r\n        // if (!this.isDraw) {\r\n        //     this.isDraw = true;\r\n        // }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    reset(list) {\r\n        this.point = list;\r\n        this.point2 = list;\r\n        this._regions = [\r\n\r\n        ];\r\n        cc.log(list, this.node.parent.y)\r\n        let list3 = [];\r\n        let list4 = [];\r\n\r\n        let num = 1;\r\n        if (cocosz.dataMgr.CurLevelId == 57 || cocosz.dataMgr.CurLevelId == 16 || cocosz.dataMgr.CurLevelId == 40 ||\r\n            cocosz.dataMgr.CurLevelId == 34 || cocosz.dataMgr.CurLevelId == 108 || cocosz.dataMgr.CurLevelId == 60 ||\r\n            cocosz.dataMgr.CurLevelId == 61 || cocosz.dataMgr.CurLevelId == 63 || cocosz.dataMgr.CurLevelId == 66 ||\r\n            cocosz.dataMgr.CurLevelId == 86 || cocosz.dataMgr.CurLevelId == 90 || cocosz.dataMgr.CurLevelId == 92 ||\r\n            cocosz.dataMgr.CurLevelId == 96 || cocosz.dataMgr.CurLevelId == 99 || cocosz.dataMgr.CurLevelId == 103 ||\r\n            cocosz.dataMgr.CurLevelId == 114 || cocosz.dataMgr.CurLevelId == 119 || cocosz.dataMgr.CurLevelId == 122 || cocosz.dataMgr.CurLevelId == 130 || cocosz.dataMgr.CurLevelId == 136 ||\r\n            cocosz.dataMgr.CurLevelId == 134 || (cocosz.dataMgr.CurLevelId == 136 && this.node.parent.y != 0) ||\r\n            (cocosz.dataMgr.CurLevelId == 139 && this.node.parent.y == 1440)) num++;\r\n\r\n        if (cocosz.dataMgr.CurLevelId == 32) num += 2;\r\n        for (let idx of list) {\r\n            let ll2 = [];\r\n            for (let idx2 of idx) {\r\n                let ll = [];\r\n\r\n                ll.push(idx2.x);\r\n                ll.push(idx2.y);\r\n                ll2.push(ll);//-287.7516   -237.2374\r\n            }\r\n\r\n\r\n            if (num <= 0) {\r\n                // this.node.getComponent(\"DrawMaskSc3\").init(ll2);\r\n                this.init(ll2);\r\n            }\r\n            else {\r\n                list3.push(ll2)\r\n            }\r\n            num--;\r\n\r\n            this._regions.push(ll2);\r\n        }\r\n        for (let list of list3) {\r\n            let a = list.map((v, i) => {\r\n                const v2 = cc.v2(v[0], v[1])\r\n                return v2;\r\n            });\r\n            list4.push(a);\r\n        }\r\n\r\n        this._regions2 = list4;\r\n    }\r\n    onLoad() {\r\n        console.log(\"---------------------沙\")\r\n        this.graphics = this.mask._graphics;\r\n        this.Tgraphics = this.Tmask._graphics;\r\n\r\n\r\n        this.Tgraphics.strokeColor = cc.Color.BLUE;\r\n        // this.Tgraphics.lineWidth = 5;\r\n        this.Tgraphics.lineCap = cc.Graphics.LineCap.ROUND;\r\n        this.Tgraphics.lineJoin = cc.Graphics.LineJoin.ROUND;\r\n        this.Tgraphics.clear();\r\n        for (let index = 0; index < 20; index++) {\r\n            const c = this.node_dirty.addComponent(cc.PhysicsChainCollider);\r\n            c.loop = true;\r\n            c.enabled = false;\r\n        }\r\n        this.graphics.strokeColor = cc.Color.BLUE;\r\n        this.graphics.fillColor = cc.Color.BLUE;\r\n        this.graphics.lineWidth = this.lineWidth;\r\n        this.graphics.lineCap = cc.Graphics.LineCap.ROUND;\r\n        this.graphics.lineJoin = cc.Graphics.LineJoin.ROUND;\r\n        this.graphics.clear();\r\n        this.line1.lineWidth = 7;\r\n        this.line2.lineWidth = 7;\r\n        this.line1.strokeColor = cc.color(117, 102, 63, 255);\r\n        this.line2.strokeColor = cc.color(117, 102, 63, 255);\r\n\r\n        // this.graphics.close();\r\n        // this.Tgraphics.close();\r\n\r\n        // this.node_dirty.children[0].on(cc.Node.EventType.TOUCH_START, this._touchMove, this);\r\n        // this.node_dirty.children[0].on(cc.Node.EventType.TOUCH_MOVE, this._touchMove, this);\r\n\r\n        // this.listen.on(cc.Node.EventType.TOUCH_START, this._touchMove, this);\r\n        // this.listen.on(cc.Node.EventType.TOUCH_MOVE, this._touchMove, this);\r\n        // this.listen.on(cc.Node.EventType.TOUCH_END, this._touchENnd, this);\r\n        // this.listen.on(cc.Node.EventType.TOUCH_CANCEL, this._touchENnd, this);\r\n\r\n\r\n\r\n        cc.find(\"Canvas/gameBg\").on(cc.Node.EventType.TOUCH_START, this._touchMove, this);\r\n        cc.find(\"Canvas/gameBg\").on(cc.Node.EventType.TOUCH_MOVE, this._touchMove, this);\r\n        cc.find(\"Canvas/gameBg\").on(cc.Node.EventType.TOUCH_END, this._touchENnd, this);\r\n        cc.find(\"Canvas/gameBg\").on(cc.Node.EventType.TOUCH_CANCEL, this._touchENnd, this);\r\n        // cc.find(\"Canvas\").on(cc.Node.EventType.TOUCH_END, this._touchMove, this);\r\n        // cc.find(\"Canvas\").on(cc.Node.EventType.TOUCH_CANCEL, this._touchMove, this);\r\n        // this.listen.on(cc.Node.EventType.TOUCH_START, this._touchMove, this);\r\n        // this.listen.on(cc.Node.EventType.TOUCH_MOVE, this._touchMove, this);\r\n\r\n    }\r\n    _touchENnd(touch: cc.Touch) {\r\n        if (this.id == touch.getID()) {\r\n            this.id = -1;\r\n            this.frequency = 0;\r\n        }\r\n    }\r\n    _touchMove(touch: cc.Touch) {\r\n        // cc.log(\"------------------划沙子-\",)\r\n        // cc.log(\"-------1111111111111\", touch.getID());\r\n        // console.log(\"---------------------滑动沙子\")\r\n        // if (touch.getID() != 0) return;\r\n\r\n        this.frequency++;\r\n\r\n        if (this.frequency % 2 != 1) {\r\n            // cc.log(\"-------------asdf\")\r\n            return\r\n        }\r\n        if (this.id == -1) {\r\n            this.id = touch.getID();\r\n        }\r\n        else {\r\n            if (this.id != touch.getID()) {\r\n                return;\r\n            }\r\n        }\r\n        const regions = [[]];\r\n\r\n        let pp = touch.getLocation();\r\n\r\n        pp.y += 1600 * cocosz.gameMgr.touchNum;\r\n\r\n        const pos = this.node_dirty.convertToNodeSpaceAR(pp);\r\n        let ret = false;\r\n        for (let list of this._regions2) {\r\n            if (cc.Intersection.pointInPolygon(pos, list)) {\r\n                ret = true;\r\n            }\r\n        }\r\n        if (!ret) return;\r\n\r\n\r\n        // const regions = [[]];\r\n        // const pos = this.graphics.node.convertToNodeSpaceAR(touch.getLocation());\r\n        const delta = touch.getDelta();\r\n        const count = DIG_FRAGMENT;\r\n        if (delta.mag() < 5) {\r\n            for (let index = 0; index < count; index++) {\r\n                const r = 2 * Math.PI * index / count;\r\n                const x = pos.x + DIG_RADIUS * Math.cos(r);\r\n                const y = pos.y + DIG_RADIUS * Math.sin(r);\r\n                regions[0].push(this._optimizePoint([x, y]));\r\n            }\r\n        } else {\r\n            const startPos = pos.sub(delta);\r\n            for (let index = 0; index < count; index++) {\r\n                const r = 2 * Math.PI * index / count;\r\n                let vec_x = DIG_RADIUS * Math.cos(r);\r\n                let vec_y = DIG_RADIUS * Math.sin(r);\r\n                let x, y;\r\n                if (delta.dot(cc.v2(vec_x, vec_y)) > 0) {\r\n                    x = pos.x + vec_x;\r\n                    y = pos.y + vec_y;\r\n                } else {\r\n                    x = startPos.x + vec_x;\r\n                    y = startPos.y + vec_y;\r\n                }\r\n                regions[0].push(this._optimizePoint([x, y]));\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // cocosz.audioMgr.playsandEffect();\r\n        // const count = DIG_FRAGMENT;\r\n        // for (let index = 0; index < count; index++) {\r\n        //     const r = 2 * Math.PI * index / count;\r\n        //     const x = pos.x + DIG_RADIUS * Math.cos(r);\r\n        //     const y = pos.y + DIG_RADIUS * Math.sin(r);\r\n        //     regions[0].push([x, y]);\r\n        // }\r\n\r\n\r\n        // const result = PolyBool.difference({\r\n        //     regions: this._regions,\r\n        //     inverted: false\r\n        // }, {\r\n        //     regions,\r\n        //     inverted: false\r\n        // });\r\n        // cc.log(result.regions.toString() == this._regions.toString(), result.regions, this._regions)\r\n\r\n\r\n        const seg1 = PolyBool.segments({\r\n            regions: this._regions,\r\n            inverted: false\r\n        });\r\n        const seg2 = PolyBool.segments({\r\n            regions,\r\n            inverted: false\r\n        });\r\n        const comb = PolyBool.combine(seg1, seg2);\r\n        const result = PolyBool.polygon(PolyBool.selectDifference(comb));\r\n        // cc.log(seg1, seg2, comb, result, this._regions)\r\n        if (result.regions.toString() == this._regions.toString()) return;\r\n\r\n        this._regions = result.regions;\r\n        this.init(regions[0])\r\n\r\n        if (this.time <= 0) {\r\n            let prefab = cocosz.resMgr.getRes(\"sandEffect\", cc.Prefab);\r\n            let canvas = cc.find(\"Canvas\");\r\n            let node = cc.instantiate(prefab);\r\n            let pp = canvas.convertToNodeSpaceAR(touch.getLocation());\r\n            node.setPosition(pp);\r\n            canvas.addChild(node);\r\n            this.time = 0.2;\r\n            cc.game.emit(Constant.E_TIPS_NEXT)\r\n        }\r\n        // for (let child of node.children) {\r\n        // }\r\n        // this._regionsTemp\r\n\r\n        // cc.log(this.point, \"---------this.point\")\r\n        // let list2 = [];\r\n        // cc.log(this._regions);\r\n        // let a = [];\r\n        // for (let list of this._regions) {\r\n        //     let b = this.PlanarPolygonAreaMeters2(list);\r\n        //     if (b > 0.009) {\r\n        //         a.push(list);\r\n        //     }\r\n        //     cc.log(b, \"---------------Planar Polygon Area Meters2\");\r\n        // }\r\n\r\n        // this._regions = a;\r\n        // cc.log(this._regions);\r\n        // this._optimizeRegions();\r\n\r\n\r\n        this.draw();\r\n\r\n    }\r\n\r\n\r\n    _touchStart(touch: cc.Touch) {\r\n        this._touchMove(touch);\r\n\r\n        const regions = [[]];\r\n        const pos = this.node_dirty.convertToNodeSpaceAR(touch.getLocation());\r\n        const count = DIG_FRAGMENT;\r\n        for (let index = 0; index < count; index++) {\r\n            const r = 2 * Math.PI * index / count;\r\n            const x = pos.x + DIG_RADIUS * Math.cos(r);\r\n            const y = pos.y + DIG_RADIUS * Math.sin(r);\r\n            regions[0].push([x, y]);\r\n        }\r\n        // let points = regions[0].map((v, i) => {\r\n        //     const v2 = cc.v2(v[0], v[1])\r\n        //     return v2;\r\n        // });\r\n        this.init(regions[0])\r\n        // cc.log(points)\r\n\r\n    }\r\n    draw() {\r\n        // console.log(\"----------------------坐标计算\")\r\n        // this.otherCamconsole.log(era.render(this.otherCamera.node);\r\n        const enabled_chains_points = []\r\n        const chains = this.node_dirty.getComponents(cc.PhysicsChainCollider);\r\n        chains.forEach((c) => {\r\n            c.enabled = false;\r\n        })\r\n        for (let index = 0; index < this._regions.length; index++) {\r\n            const pos = this._regions[index];\r\n            let poly = chains[index];\r\n\r\n            if (!poly) {\r\n                poly = this.node_dirty.addComponent(cc.PhysicsChainCollider);\r\n                poly.loop = true;\r\n            }\r\n            poly.points.length = 0;\r\n            poly.points = pos.map((v, i) => {\r\n                const v2 = cc.v2(v[0], v[1])\r\n                return v2;\r\n            });\r\n            poly.enabled = true;\r\n            enabled_chains_points[index] = poly.points;\r\n        }\r\n\r\n        // this.point = enabled_chains_points\r\n        //cc.log(enabled_chains_points,chains,\"----------chains\")\r\n\r\n        this.graphics.clear(true);\r\n        const enabled_chains_points_sort = enabled_chains_points.map((curPoly, curPoly_i) => {\r\n            const count = enabled_chains_points.reduce((pre, nextPoly, nextPoly_i) => {\r\n                if ((curPoly_i != nextPoly_i)) {\r\n                    const length = curPoly.length;\r\n                    for (let i = 0; i < length; ++i) {\r\n                        const p0 = curPoly[i];\r\n                        if (!cc.Intersection.pointInPolygon(p0, nextPoly))\r\n                            return pre;\r\n                    }\r\n                    return pre + 1;\r\n                }\r\n                return pre;\r\n            }, 0);\r\n\r\n            return { curPoly, count };\r\n        }).sort((a, b) => {\r\n            return a.count - b.count;\r\n        })\r\n        enabled_chains_points_sort.forEach(({ curPoly, count }) => {\r\n            this.graphics.fillColor = count % 2 === 0 ? cc.Color.ORANGE : cc.Color.BLACK;\r\n            this._drawPoly(this.graphics, curPoly);\r\n            this._drawPoly(this.line2, curPoly);\r\n            this.graphics.fill();\r\n\r\n            this.line2.stroke();\r\n        })\r\n        // if (this.isFrist) {\r\n        //     this.isFrist = false;\r\n        //     enabled_chains_points_sort.forEach(({ curPoly, count }) => {\r\n        //         this.graphics.fillColor = count % 2 === 0 ? cc.Color.ORANGE : cc.color(255, 255, 255, 0);\r\n        //         this._drawPoly(this.graphics, curPoly);\r\n        //         this.graphics.fill();\r\n        //         cc.log(\"---------------------draw\")\r\n        //     })\r\n        // }\r\n    }\r\n    private _drawPoly(ctx: cc.Graphics, poly) {\r\n        poly.forEach((pos, i) => {\r\n            if (i === 0)\r\n                ctx.moveTo(pos.x, pos.y);\r\n            else\r\n                ctx.lineTo(pos.x, pos.y);\r\n            ctx.close();\r\n        })\r\n    };\r\n    private _drawPoly2(ctx: cc.Graphics, poly) {\r\n        poly.forEach((pos, i) => {\r\n            if (i === 0) {\r\n                cocosz.audioMgr.playsandEffect();\r\n            }\r\n        })\r\n    };\r\n\r\n    private _optimizePoint(point) {\r\n        return [Math.floor(point[0] * DIG_OPTIMIZE_SIZE) / DIG_OPTIMIZE_SIZE, Math.floor(point[1] * DIG_OPTIMIZE_SIZE) / DIG_OPTIMIZE_SIZE];\r\n    }\r\n\r\n\r\n    private _optimizeRegions() {\r\n        const regions = [];\r\n        for (let index = 0; index < this._regions.length; index++) {\r\n            const pos = this._regions[index];\r\n            const newPos = [];\r\n            pos.forEach((p, i) => {\r\n                p = this._optimizePoint(p);\r\n                const p_pre = this._optimizePoint(pos[(i - 1 + pos.length) % pos.length]);\r\n                const p_next = this._optimizePoint(pos[(i + 1) % pos.length]);\r\n                const vec1 = cc.v2(p[0] - p_pre[0], p[1] - p_pre[1]);\r\n                const vec2 = cc.v2(p_next[0] - p[0], p_next[1] - p[1]);\r\n                if (vec1.mag() != 0 && vec2.mag() != 0 && vec1.cross(vec2) != 0) {\r\n                    newPos.push(p);\r\n                }\r\n            })\r\n\r\n\r\n            if (newPos.length > 2) {\r\n                regions.push(newPos);\r\n            }\r\n        }\r\n        this._regions = regions;\r\n    }\r\n\r\n\r\n    onEnable() {\r\n        if (this.isEnbaled == false) {\r\n            this.isEnbaled = true;\r\n            return\r\n        }\r\n\r\n        this.scheduleOnce(() => {\r\n            this.Tgraphics.clear();\r\n            this.graphics.clear();\r\n\r\n            this.reset(this.point2);\r\n\r\n            let mask: cc.Mask = this.node.parent.getComponent(cc.Mask);\r\n            let graphics = mask._graphics;\r\n\r\n            for (let point of this.point2) {\r\n                graphics.moveTo(point[0].x, point[0].y);\r\n                for (let v2 of point) {\r\n                    graphics.lineTo(v2.x, v2.y);\r\n                }\r\n                graphics.fill();\r\n            }\r\n\r\n\r\n            this.draw();\r\n        }, 0.1)\r\n\r\n    }\r\n\r\n    start() {\r\n        this.draw();\r\n    }\r\n\r\n\r\n    update(dt) {\r\n        if (this.time > 0) {\r\n            this.time -= dt;\r\n        }\r\n    }\r\n}\r\n"]}